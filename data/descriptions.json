{
  "amzn-search-api": "AMZN Search API is a Flask powered RESTful API wrapper to the Amazon search portal.",
  "arusha-coders-api": "This is a simple API that lets you create a user account and test view user info using basic or JSON Web Token (JWT) authentication.",
  "chaplin-utils": "ckanutils is a Python library for interacting with remote and local CKAN instances. It uses ckanapi under the hood, and is essentially a high level wrapper for it. A command line interface built on top of this library is available at ckanny.",
  "ckanny": "",
  "ckanutils": "",
  "cookiecutter-collector": "A Python data collector Cookiecutter template. The scraper is designed to work in a ScraperWiki 'box', however it can be deployed virtually in any Unix environment.",
  "csv2ofx": "csv2ofx is a Python library and command line interface program that converts CSV files to OFX and QIF files for importing into GnuCash or similar financial accounting programs. csv2ofx has built in support for importing csv files from mint, yoodlee, and xero.",
  "devcraft-workshop": "",
  "ebay-search-api": "eBay Search API is a Flask powered RESTful API wrapper to the eBay search portal.",
  "gh-viewer": "gh-viewer is an HTML5 single page application, built with Brunch and Chaplin.",
  "hdx-age-api": "The hdx-age-api is a Flask powered service to query the age and status of an HDX resource. It performs updates asynchronously off a Redis backed queue via a python worker process.",
  "hdx-file-proxy": "The hdx-file-proxy is a Flask powered service to proxy csv and excel files on HDX.",
  "hdxscraper-acled": "",
  "hdxscraper-fao": "",
  "hdxscraper-fts": "",
  "hdxscraper-hdro": "",
  "hdxscraper-undp-climate": "",
  "hdxscraper-unhabitat": "",
  "hdxscraper-who": "",
  "hdxscraper-world-bank-climate": "",
  "lambdaconf-tutorial": "",
  "mentor": "This is a guidebook for those looking to become a developer protégé. It contains the skeleton of a self paced curriculum and guidelines for an ideal mentor/protégé relationship.",
  "meza": "meza is a Python library for reading and processing tabular data. It has a functional programming style API, excels at reading/writing large files, and can process 10+ file types.",
  "migrant-deaths": "",
  "octopress-site": "",
  "ongeza": "ongeza (Swahili for 'increase') is a Python command line application (CLI) that makes following the Semantic Versioning Specification a breeze. If called with no options, ongeza will print the repo's current git tag version.",
  "opentag": "opentag is a command line wrapper for openmeta. It adds support for spotlight comments, long options, and STDIN piping.",
  "pkutils": "pkutils is a Python library that simplifies python module packaging. It is intended to be used in your package's setup.py file.",
  "pycon17-tute": "",
  "pyconza-tutorial": "",
  "pygogo": "pygogo is a Python logging library and command-line interface with super powers. pygogo leverages the standard Python logging module under the hood, so there's no need to learn yet-another logging library. The default implementation sends all messages to stdout, and any messages at level WARNING or above also to stderr.",
  "reubano.github.com": "",
  "swutils": "swutils is a Python library for interacting with ScraperWiki boxes.",
  "todomvc-mithril": "This is a Mithril.js version of TodoMVC written in CoffeeScript and built with Brunch.",
  "tophubbers": "tophubbers is an HTML5 single page application, built with Brunch and Chaplin.",
  "un-casualty": "",
  "4w-visualizer": "4w-visualizer is a Brunch and Chaplin web app for visualizing 4w's (who's doing what, where, and when).",
  "akili": "akili is a Brunch and Chaplin web app for creating responsive choropleths.",
  "kazeeki": "",
  "portfolio-maker": "",
  "prometheus": "Prometheus is a Flask powered web app that tells you how your stock portfolio has performed over time, gives insight into how to optimize your asset allocation, and monitors your portfolio for rebalancing or performance enhancing opportunities.",
  "prometheus-api": "Prometheus-API is the Flask powered RESTful API behind Prometheus",
  "proposer": "",
  "redcross-viz": "",
  "riko": "riko is a pure Python library for analyzing and processing streams of structured data. riko has synchronous and asynchronous APIs, supports parallel execution, and is well suited for processing RSS feeds. riko also supplies a command-line interface for executing flows, i.e., stream processors aka workflows."
}
